
DIO_TOGGLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005c4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08000684  08000684  00010684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080006f4  080006f4  000106fc  2**0
                  CONTENTS
  4 .ARM          00000000  080006f4  080006f4  000106fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006f4  080006fc  000106fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006f4  080006f4  000106f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006f8  080006f8  000106f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000106fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000000  080006fc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  080006fc  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000106fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000008f5  00000000  00000000  00010724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000249  00000000  00000000  00011019  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000098  00000000  00000000  00011268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000080  00000000  00000000  00011300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00009120  00000000  00000000  00011380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000096a  00000000  00000000  0001a4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0002fe8e  00000000  00000000  0001ae0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0004ac98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001c8  00000000  00000000  0004ace8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800066c 	.word	0x0800066c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	0800066c 	.word	0x0800066c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000118:	b580      	push	{r7, lr}
 800011a:	b082      	sub	sp, #8
 800011c:	af00      	add	r7, sp, #0
 800011e:	0002      	movs	r2, r0
 8000120:	1dfb      	adds	r3, r7, #7
 8000122:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000124:	1dfb      	adds	r3, r7, #7
 8000126:	781b      	ldrb	r3, [r3, #0]
 8000128:	2b7f      	cmp	r3, #127	; 0x7f
 800012a:	d809      	bhi.n	8000140 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800012c:	1dfb      	adds	r3, r7, #7
 800012e:	781b      	ldrb	r3, [r3, #0]
 8000130:	001a      	movs	r2, r3
 8000132:	231f      	movs	r3, #31
 8000134:	401a      	ands	r2, r3
 8000136:	4b04      	ldr	r3, [pc, #16]	; (8000148 <__NVIC_EnableIRQ+0x30>)
 8000138:	2101      	movs	r1, #1
 800013a:	4091      	lsls	r1, r2
 800013c:	000a      	movs	r2, r1
 800013e:	601a      	str	r2, [r3, #0]
  }
}
 8000140:	46c0      	nop			; (mov r8, r8)
 8000142:	46bd      	mov	sp, r7
 8000144:	b002      	add	sp, #8
 8000146:	bd80      	pop	{r7, pc}
 8000148:	e000e100 	.word	0xe000e100

0800014c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	0002      	movs	r2, r0
 8000154:	6039      	str	r1, [r7, #0]
 8000156:	1dfb      	adds	r3, r7, #7
 8000158:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800015a:	1dfb      	adds	r3, r7, #7
 800015c:	781b      	ldrb	r3, [r3, #0]
 800015e:	2b7f      	cmp	r3, #127	; 0x7f
 8000160:	d828      	bhi.n	80001b4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000162:	4a2f      	ldr	r2, [pc, #188]	; (8000220 <__NVIC_SetPriority+0xd4>)
 8000164:	1dfb      	adds	r3, r7, #7
 8000166:	781b      	ldrb	r3, [r3, #0]
 8000168:	b25b      	sxtb	r3, r3
 800016a:	089b      	lsrs	r3, r3, #2
 800016c:	33c0      	adds	r3, #192	; 0xc0
 800016e:	009b      	lsls	r3, r3, #2
 8000170:	589b      	ldr	r3, [r3, r2]
 8000172:	1dfa      	adds	r2, r7, #7
 8000174:	7812      	ldrb	r2, [r2, #0]
 8000176:	0011      	movs	r1, r2
 8000178:	2203      	movs	r2, #3
 800017a:	400a      	ands	r2, r1
 800017c:	00d2      	lsls	r2, r2, #3
 800017e:	21ff      	movs	r1, #255	; 0xff
 8000180:	4091      	lsls	r1, r2
 8000182:	000a      	movs	r2, r1
 8000184:	43d2      	mvns	r2, r2
 8000186:	401a      	ands	r2, r3
 8000188:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800018a:	683b      	ldr	r3, [r7, #0]
 800018c:	019b      	lsls	r3, r3, #6
 800018e:	22ff      	movs	r2, #255	; 0xff
 8000190:	401a      	ands	r2, r3
 8000192:	1dfb      	adds	r3, r7, #7
 8000194:	781b      	ldrb	r3, [r3, #0]
 8000196:	0018      	movs	r0, r3
 8000198:	2303      	movs	r3, #3
 800019a:	4003      	ands	r3, r0
 800019c:	00db      	lsls	r3, r3, #3
 800019e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001a0:	481f      	ldr	r0, [pc, #124]	; (8000220 <__NVIC_SetPriority+0xd4>)
 80001a2:	1dfb      	adds	r3, r7, #7
 80001a4:	781b      	ldrb	r3, [r3, #0]
 80001a6:	b25b      	sxtb	r3, r3
 80001a8:	089b      	lsrs	r3, r3, #2
 80001aa:	430a      	orrs	r2, r1
 80001ac:	33c0      	adds	r3, #192	; 0xc0
 80001ae:	009b      	lsls	r3, r3, #2
 80001b0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80001b2:	e031      	b.n	8000218 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001b4:	4a1b      	ldr	r2, [pc, #108]	; (8000224 <__NVIC_SetPriority+0xd8>)
 80001b6:	1dfb      	adds	r3, r7, #7
 80001b8:	781b      	ldrb	r3, [r3, #0]
 80001ba:	0019      	movs	r1, r3
 80001bc:	230f      	movs	r3, #15
 80001be:	400b      	ands	r3, r1
 80001c0:	3b08      	subs	r3, #8
 80001c2:	089b      	lsrs	r3, r3, #2
 80001c4:	3306      	adds	r3, #6
 80001c6:	009b      	lsls	r3, r3, #2
 80001c8:	18d3      	adds	r3, r2, r3
 80001ca:	3304      	adds	r3, #4
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	1dfa      	adds	r2, r7, #7
 80001d0:	7812      	ldrb	r2, [r2, #0]
 80001d2:	0011      	movs	r1, r2
 80001d4:	2203      	movs	r2, #3
 80001d6:	400a      	ands	r2, r1
 80001d8:	00d2      	lsls	r2, r2, #3
 80001da:	21ff      	movs	r1, #255	; 0xff
 80001dc:	4091      	lsls	r1, r2
 80001de:	000a      	movs	r2, r1
 80001e0:	43d2      	mvns	r2, r2
 80001e2:	401a      	ands	r2, r3
 80001e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80001e6:	683b      	ldr	r3, [r7, #0]
 80001e8:	019b      	lsls	r3, r3, #6
 80001ea:	22ff      	movs	r2, #255	; 0xff
 80001ec:	401a      	ands	r2, r3
 80001ee:	1dfb      	adds	r3, r7, #7
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	0018      	movs	r0, r3
 80001f4:	2303      	movs	r3, #3
 80001f6:	4003      	ands	r3, r0
 80001f8:	00db      	lsls	r3, r3, #3
 80001fa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80001fc:	4809      	ldr	r0, [pc, #36]	; (8000224 <__NVIC_SetPriority+0xd8>)
 80001fe:	1dfb      	adds	r3, r7, #7
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	001c      	movs	r4, r3
 8000204:	230f      	movs	r3, #15
 8000206:	4023      	ands	r3, r4
 8000208:	3b08      	subs	r3, #8
 800020a:	089b      	lsrs	r3, r3, #2
 800020c:	430a      	orrs	r2, r1
 800020e:	3306      	adds	r3, #6
 8000210:	009b      	lsls	r3, r3, #2
 8000212:	18c3      	adds	r3, r0, r3
 8000214:	3304      	adds	r3, #4
 8000216:	601a      	str	r2, [r3, #0]
}
 8000218:	46c0      	nop			; (mov r8, r8)
 800021a:	46bd      	mov	sp, r7
 800021c:	b003      	add	sp, #12
 800021e:	bd90      	pop	{r4, r7, pc}
 8000220:	e000e100 	.word	0xe000e100
 8000224:	e000ed00 	.word	0xe000ed00

08000228 <USART1_IRQHandler>:
bool ComReceived;								//Флаг приёма строки данных
char Rx;										//Входные данные


void USART1_IRQHandler(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
	if ((USART1->ISR & USART_ISR_RXNE)!=0)		//Прерывание по приёму данных
 800022c:	4b08      	ldr	r3, [pc, #32]	; (8000250 <USART1_IRQHandler+0x28>)
 800022e:	69db      	ldr	r3, [r3, #28]
 8000230:	2220      	movs	r2, #32
 8000232:	4013      	ands	r3, r2
 8000234:	d008      	beq.n	8000248 <USART1_IRQHandler+0x20>
	{
		Rx=(char)USART1->RDR;
 8000236:	4b06      	ldr	r3, [pc, #24]	; (8000250 <USART1_IRQHandler+0x28>)
 8000238:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800023a:	b29b      	uxth	r3, r3
 800023c:	b2da      	uxtb	r2, r3
 800023e:	4b05      	ldr	r3, [pc, #20]	; (8000254 <USART1_IRQHandler+0x2c>)
 8000240:	701a      	strb	r2, [r3, #0]
		ComReceived=true;
 8000242:	4b05      	ldr	r3, [pc, #20]	; (8000258 <USART1_IRQHandler+0x30>)
 8000244:	2201      	movs	r2, #1
 8000246:	701a      	strb	r2, [r3, #0]
	}
}
 8000248:	46c0      	nop			; (mov r8, r8)
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	40013800 	.word	0x40013800
 8000254:	20000081 	.word	0x20000081
 8000258:	20000080 	.word	0x20000080

0800025c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	TIM3->SR &= ~TIM_SR_UIF;					//Сброс флага переполнения
 8000260:	4b10      	ldr	r3, [pc, #64]	; (80002a4 <TIM3_IRQHandler+0x48>)
 8000262:	691a      	ldr	r2, [r3, #16]
 8000264:	4b0f      	ldr	r3, [pc, #60]	; (80002a4 <TIM3_IRQHandler+0x48>)
 8000266:	2101      	movs	r1, #1
 8000268:	438a      	bics	r2, r1
 800026a:	611a      	str	r2, [r3, #16]
	if (ComReceived)
 800026c:	4b0e      	ldr	r3, [pc, #56]	; (80002a8 <TIM3_IRQHandler+0x4c>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <TIM3_IRQHandler+0x1c>
							ExecuteCommand();	//Обрабатываем принятый символ
 8000274:	f000 f912 	bl	800049c <ExecuteCommand>
	 GPIOA->ODR ^= GPIO_ODR_9; //Мигаем пином 9 порта A
 8000278:	2390      	movs	r3, #144	; 0x90
 800027a:	05db      	lsls	r3, r3, #23
 800027c:	695a      	ldr	r2, [r3, #20]
 800027e:	2390      	movs	r3, #144	; 0x90
 8000280:	05db      	lsls	r3, r3, #23
 8000282:	2180      	movs	r1, #128	; 0x80
 8000284:	0089      	lsls	r1, r1, #2
 8000286:	404a      	eors	r2, r1
 8000288:	615a      	str	r2, [r3, #20]
		  GPIOA->ODR ^= GPIO_ODR_10; //Мигаем пином 10 порта A
 800028a:	2390      	movs	r3, #144	; 0x90
 800028c:	05db      	lsls	r3, r3, #23
 800028e:	695a      	ldr	r2, [r3, #20]
 8000290:	2390      	movs	r3, #144	; 0x90
 8000292:	05db      	lsls	r3, r3, #23
 8000294:	2180      	movs	r1, #128	; 0x80
 8000296:	00c9      	lsls	r1, r1, #3
 8000298:	404a      	eors	r2, r1
 800029a:	615a      	str	r2, [r3, #20]
}
 800029c:	46c0      	nop			; (mov r8, r8)
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	46c0      	nop			; (mov r8, r8)
 80002a4:	40000400 	.word	0x40000400
 80002a8:	20000080 	.word	0x20000080

080002ac <Init_GPIO>:



void Init_GPIO(void){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0

	//Диоды подключены к выходам PA9 и PA10
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN; //Включаем тактирование на порте A
 80002b0:	4b0d      	ldr	r3, [pc, #52]	; (80002e8 <Init_GPIO+0x3c>)
 80002b2:	695a      	ldr	r2, [r3, #20]
 80002b4:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <Init_GPIO+0x3c>)
 80002b6:	2180      	movs	r1, #128	; 0x80
 80002b8:	0289      	lsls	r1, r1, #10
 80002ba:	430a      	orrs	r2, r1
 80002bc:	615a      	str	r2, [r3, #20]

			    GPIOA->MODER |= (1 << (9 * 2)); // Настраиваем порт 9 на output
 80002be:	2390      	movs	r3, #144	; 0x90
 80002c0:	05db      	lsls	r3, r3, #23
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	2390      	movs	r3, #144	; 0x90
 80002c6:	05db      	lsls	r3, r3, #23
 80002c8:	2180      	movs	r1, #128	; 0x80
 80002ca:	02c9      	lsls	r1, r1, #11
 80002cc:	430a      	orrs	r2, r1
 80002ce:	601a      	str	r2, [r3, #0]
			    GPIOA->MODER |= (1 << (10 * 2)); // Настраиваем порт 10 на output
 80002d0:	2390      	movs	r3, #144	; 0x90
 80002d2:	05db      	lsls	r3, r3, #23
 80002d4:	681a      	ldr	r2, [r3, #0]
 80002d6:	2390      	movs	r3, #144	; 0x90
 80002d8:	05db      	lsls	r3, r3, #23
 80002da:	2180      	movs	r1, #128	; 0x80
 80002dc:	0349      	lsls	r1, r1, #13
 80002de:	430a      	orrs	r2, r1
 80002e0:	601a      	str	r2, [r3, #0]
}
 80002e2:	46c0      	nop			; (mov r8, r8)
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	40021000 	.word	0x40021000

080002ec <initTIM3>:


void initTIM3(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;			//Включить тактирование TIM3
 80002f0:	4b10      	ldr	r3, [pc, #64]	; (8000334 <initTIM3+0x48>)
 80002f2:	69da      	ldr	r2, [r3, #28]
 80002f4:	4b0f      	ldr	r3, [pc, #60]	; (8000334 <initTIM3+0x48>)
 80002f6:	2102      	movs	r1, #2
 80002f8:	430a      	orrs	r2, r1
 80002fa:	61da      	str	r2, [r3, #28]
	TIM3->PSC = 8000-1;						//Предделитель частоты (8Гц/8000 = 1кГц)
 80002fc:	4b0e      	ldr	r3, [pc, #56]	; (8000338 <initTIM3+0x4c>)
 80002fe:	4a0f      	ldr	r2, [pc, #60]	; (800033c <initTIM3+0x50>)
 8000300:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 1000-1;							//Модуль счёта таймера (1кГц/1000 = 1с)
 8000302:	4b0d      	ldr	r3, [pc, #52]	; (8000338 <initTIM3+0x4c>)
 8000304:	4a0e      	ldr	r2, [pc, #56]	; (8000340 <initTIM3+0x54>)
 8000306:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->DIER |= TIM_DIER_UIE;					//Разрешить прерывание по переполнению таймера
 8000308:	4b0b      	ldr	r3, [pc, #44]	; (8000338 <initTIM3+0x4c>)
 800030a:	68da      	ldr	r2, [r3, #12]
 800030c:	4b0a      	ldr	r3, [pc, #40]	; (8000338 <initTIM3+0x4c>)
 800030e:	2101      	movs	r1, #1
 8000310:	430a      	orrs	r2, r1
 8000312:	60da      	str	r2, [r3, #12]
	TIM3->CR1 |= TIM_CR1_CEN;					//Включить таймер
 8000314:	4b08      	ldr	r3, [pc, #32]	; (8000338 <initTIM3+0x4c>)
 8000316:	681a      	ldr	r2, [r3, #0]
 8000318:	4b07      	ldr	r3, [pc, #28]	; (8000338 <initTIM3+0x4c>)
 800031a:	2101      	movs	r1, #1
 800031c:	430a      	orrs	r2, r1
 800031e:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(TIM3_IRQn);					//Рарзрешить прерывание от TIM3
 8000320:	2010      	movs	r0, #16
 8000322:	f7ff fef9 	bl	8000118 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM3_IRQn, 1);				//Выставляем приоритет
 8000326:	2101      	movs	r1, #1
 8000328:	2010      	movs	r0, #16
 800032a:	f7ff ff0f 	bl	800014c <__NVIC_SetPriority>
}
 800032e:	46c0      	nop			; (mov r8, r8)
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	40021000 	.word	0x40021000
 8000338:	40000400 	.word	0x40000400
 800033c:	00001f3f 	.word	0x00001f3f
 8000340:	000003e7 	.word	0x000003e7

08000344 <initUSART1>:




void initUSART1(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000348:	4b1e      	ldr	r3, [pc, #120]	; (80003c4 <initUSART1+0x80>)
 800034a:	695a      	ldr	r2, [r3, #20]
 800034c:	4b1d      	ldr	r3, [pc, #116]	; (80003c4 <initUSART1+0x80>)
 800034e:	2180      	movs	r1, #128	; 0x80
 8000350:	0289      	lsls	r1, r1, #10
 8000352:	430a      	orrs	r2, r1
 8000354:	615a      	str	r2, [r3, #20]

		    // Включение тактирования USART1
		    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000356:	4b1b      	ldr	r3, [pc, #108]	; (80003c4 <initUSART1+0x80>)
 8000358:	699a      	ldr	r2, [r3, #24]
 800035a:	4b1a      	ldr	r3, [pc, #104]	; (80003c4 <initUSART1+0x80>)
 800035c:	2180      	movs	r1, #128	; 0x80
 800035e:	01c9      	lsls	r1, r1, #7
 8000360:	430a      	orrs	r2, r1
 8000362:	619a      	str	r2, [r3, #24]

		    // Настройка пинов PA2 (TX) и PA3 (RX) в режим альтернативной функции
		    GPIOA->MODER |= GPIO_MODER_MODER2_1 | GPIO_MODER_MODER3_1;
 8000364:	2390      	movs	r3, #144	; 0x90
 8000366:	05db      	lsls	r3, r3, #23
 8000368:	681a      	ldr	r2, [r3, #0]
 800036a:	2390      	movs	r3, #144	; 0x90
 800036c:	05db      	lsls	r3, r3, #23
 800036e:	21a0      	movs	r1, #160	; 0xa0
 8000370:	430a      	orrs	r2, r1
 8000372:	601a      	str	r2, [r3, #0]

		    // Настройка альтернативной функции для пинов PA2 и PA3
		    GPIOA->AFR[0] |= (1 << GPIO_AFRL_AFRL2_Pos) | (1 << GPIO_AFRL_AFRL3_Pos);
 8000374:	2390      	movs	r3, #144	; 0x90
 8000376:	05db      	lsls	r3, r3, #23
 8000378:	6a1a      	ldr	r2, [r3, #32]
 800037a:	2390      	movs	r3, #144	; 0x90
 800037c:	05db      	lsls	r3, r3, #23
 800037e:	2188      	movs	r1, #136	; 0x88
 8000380:	0149      	lsls	r1, r1, #5
 8000382:	430a      	orrs	r2, r1
 8000384:	621a      	str	r2, [r3, #32]

		    // Настройка скорости передачи данных
		    USART1->BRR = 8000000/9600; // Скорость 9600 бит/с при частоте шины 8 МГц
 8000386:	4b10      	ldr	r3, [pc, #64]	; (80003c8 <initUSART1+0x84>)
 8000388:	4a10      	ldr	r2, [pc, #64]	; (80003cc <initUSART1+0x88>)
 800038a:	60da      	str	r2, [r3, #12]

		    // Включение передатчика и приемника USART1 и прерываний при приёме данных
		    USART1->CR1 |= USART_CR1_UE | USART_CR1_RE | USART_CR1_TE | USART_CR1_RXNEIE;
 800038c:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <initUSART1+0x84>)
 800038e:	681a      	ldr	r2, [r3, #0]
 8000390:	4b0d      	ldr	r3, [pc, #52]	; (80003c8 <initUSART1+0x84>)
 8000392:	212d      	movs	r1, #45	; 0x2d
 8000394:	430a      	orrs	r2, r1
 8000396:	601a      	str	r2, [r3, #0]

		    USART1->CR3 = USART_CR3_DMAT | USART_CR3_DMAR; // Разрешаем использование DMA для передачи и приема
 8000398:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <initUSART1+0x84>)
 800039a:	22c0      	movs	r2, #192	; 0xc0
 800039c:	609a      	str	r2, [r3, #8]
		        USART1->CR1 |= USART_CR1_UE; // Включаем USART1
 800039e:	4b0a      	ldr	r3, [pc, #40]	; (80003c8 <initUSART1+0x84>)
 80003a0:	681a      	ldr	r2, [r3, #0]
 80003a2:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <initUSART1+0x84>)
 80003a4:	2101      	movs	r1, #1
 80003a6:	430a      	orrs	r2, r1
 80003a8:	601a      	str	r2, [r3, #0]

		        // Включаем тактирование DMA1
		        RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 80003aa:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <initUSART1+0x80>)
 80003ac:	695a      	ldr	r2, [r3, #20]
 80003ae:	4b05      	ldr	r3, [pc, #20]	; (80003c4 <initUSART1+0x80>)
 80003b0:	2101      	movs	r1, #1
 80003b2:	430a      	orrs	r2, r1
 80003b4:	615a      	str	r2, [r3, #20]

		    NVIC_EnableIRQ(USART1_IRQn); //Разрешаем прерывания в NVIC
 80003b6:	201b      	movs	r0, #27
 80003b8:	f7ff feae 	bl	8000118 <__NVIC_EnableIRQ>



}
 80003bc:	46c0      	nop			; (mov r8, r8)
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	46c0      	nop			; (mov r8, r8)
 80003c4:	40021000 	.word	0x40021000
 80003c8:	40013800 	.word	0x40013800
 80003cc:	00000341 	.word	0x00000341

080003d0 <initDMA>:

void initDMA(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;				//разрешить такт. DMA
 80003d4:	4b10      	ldr	r3, [pc, #64]	; (8000418 <initDMA+0x48>)
 80003d6:	695a      	ldr	r2, [r3, #20]
 80003d8:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <initDMA+0x48>)
 80003da:	2101      	movs	r1, #1
 80003dc:	430a      	orrs	r2, r1
 80003de:	615a      	str	r2, [r3, #20]

	DMA1_Channel2->CPAR = (uint32_t)&USART1->TDR;	//указатель на регистр данных для передачи USART1
 80003e0:	4b0e      	ldr	r3, [pc, #56]	; (800041c <initDMA+0x4c>)
 80003e2:	4a0f      	ldr	r2, [pc, #60]	; (8000420 <initDMA+0x50>)
 80003e4:	609a      	str	r2, [r3, #8]

	DMA1_Channel2->CCR = 0;
 80003e6:	4b0d      	ldr	r3, [pc, #52]	; (800041c <initDMA+0x4c>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]
	DMA1_Channel2->CCR |= DMA_CCR_DIR;				//направление - из памяти в устройство
 80003ec:	4b0b      	ldr	r3, [pc, #44]	; (800041c <initDMA+0x4c>)
 80003ee:	681a      	ldr	r2, [r3, #0]
 80003f0:	4b0a      	ldr	r3, [pc, #40]	; (800041c <initDMA+0x4c>)
 80003f2:	2110      	movs	r1, #16
 80003f4:	430a      	orrs	r2, r1
 80003f6:	601a      	str	r2, [r3, #0]
	DMA1_Channel2->CCR |= DMA_CCR_MINC;			//инкремент указателя в памяти
 80003f8:	4b08      	ldr	r3, [pc, #32]	; (800041c <initDMA+0x4c>)
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	4b07      	ldr	r3, [pc, #28]	; (800041c <initDMA+0x4c>)
 80003fe:	2180      	movs	r1, #128	; 0x80
 8000400:	430a      	orrs	r2, r1
 8000402:	601a      	str	r2, [r3, #0]
	USART1->CR3 |= USART_CR3_DMAT;					//настроить USART1 на работу с DMA
 8000404:	4b07      	ldr	r3, [pc, #28]	; (8000424 <initDMA+0x54>)
 8000406:	689a      	ldr	r2, [r3, #8]
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <initDMA+0x54>)
 800040a:	2180      	movs	r1, #128	; 0x80
 800040c:	430a      	orrs	r2, r1
 800040e:	609a      	str	r2, [r3, #8]
}
 8000410:	46c0      	nop			; (mov r8, r8)
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	40021000 	.word	0x40021000
 800041c:	4002001c 	.word	0x4002001c
 8000420:	40013828 	.word	0x40013828
 8000424:	40013800 	.word	0x40013800

08000428 <TransmitWithDMA>:

void TransmitWithDMA(char *str)
{
 8000428:	b590      	push	{r4, r7, lr}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
		strcat(str,"\r\n");									//добавляем символ конца строки
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	0018      	movs	r0, r3
 8000434:	f7ff fe68 	bl	8000108 <strlen>
 8000438:	0003      	movs	r3, r0
 800043a:	001a      	movs	r2, r3
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	189a      	adds	r2, r3, r2
 8000440:	4b13      	ldr	r3, [pc, #76]	; (8000490 <TransmitWithDMA+0x68>)
 8000442:	0010      	movs	r0, r2
 8000444:	0019      	movs	r1, r3
 8000446:	2303      	movs	r3, #3
 8000448:	001a      	movs	r2, r3
 800044a:	f000 f8fd 	bl	8000648 <memcpy>

	DMA1_Channel2->CCR &= ~DMA_CCR_EN;						//выключаем DMA
 800044e:	4b11      	ldr	r3, [pc, #68]	; (8000494 <TransmitWithDMA+0x6c>)
 8000450:	681a      	ldr	r2, [r3, #0]
 8000452:	4b10      	ldr	r3, [pc, #64]	; (8000494 <TransmitWithDMA+0x6c>)
 8000454:	2101      	movs	r1, #1
 8000456:	438a      	bics	r2, r1
 8000458:	601a      	str	r2, [r3, #0]
	DMA1_Channel2->CMAR = (uint32_t)str;					//указатель на строку, которую нужно передать
 800045a:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <TransmitWithDMA+0x6c>)
 800045c:	687a      	ldr	r2, [r7, #4]
 800045e:	60da      	str	r2, [r3, #12]
	DMA1_Channel2->CNDTR = strlen(str);						//длина строки
 8000460:	4c0c      	ldr	r4, [pc, #48]	; (8000494 <TransmitWithDMA+0x6c>)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	0018      	movs	r0, r3
 8000466:	f7ff fe4f 	bl	8000108 <strlen>
 800046a:	0003      	movs	r3, r0
 800046c:	6063      	str	r3, [r4, #4]
	DMA1->IFCR |= DMA_IFCR_CTCIF1;							//сброс флага окончания обмена
 800046e:	4b0a      	ldr	r3, [pc, #40]	; (8000498 <TransmitWithDMA+0x70>)
 8000470:	685a      	ldr	r2, [r3, #4]
 8000472:	4b09      	ldr	r3, [pc, #36]	; (8000498 <TransmitWithDMA+0x70>)
 8000474:	2102      	movs	r1, #2
 8000476:	430a      	orrs	r2, r1
 8000478:	605a      	str	r2, [r3, #4]
	DMA1_Channel2->CCR |= DMA_CCR_EN;    					//включить DMA
 800047a:	4b06      	ldr	r3, [pc, #24]	; (8000494 <TransmitWithDMA+0x6c>)
 800047c:	681a      	ldr	r2, [r3, #0]
 800047e:	4b05      	ldr	r3, [pc, #20]	; (8000494 <TransmitWithDMA+0x6c>)
 8000480:	2101      	movs	r1, #1
 8000482:	430a      	orrs	r2, r1
 8000484:	601a      	str	r2, [r3, #0]
}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	46bd      	mov	sp, r7
 800048a:	b003      	add	sp, #12
 800048c:	bd90      	pop	{r4, r7, pc}
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	08000684 	.word	0x08000684
 8000494:	4002001c 	.word	0x4002001c
 8000498:	40020000 	.word	0x40020000

0800049c <ExecuteCommand>:


void ExecuteCommand(void)
{
 800049c:	b5b0      	push	{r4, r5, r7, lr}
 800049e:	af00      	add	r7, sp, #0
	memset(TxBuffer,0,sizeof(TxBuffer));					//Очистка буфера передачи
 80004a0:	4b32      	ldr	r3, [pc, #200]	; (800056c <ExecuteCommand+0xd0>)
 80004a2:	2264      	movs	r2, #100	; 0x64
 80004a4:	2100      	movs	r1, #0
 80004a6:	0018      	movs	r0, r3
 80004a8:	f000 f8d7 	bl	800065a <memset>

	/* Обработчик команд */
	switch(Rx){
 80004ac:	4b30      	ldr	r3, [pc, #192]	; (8000570 <ExecuteCommand+0xd4>)
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	2b53      	cmp	r3, #83	; 0x53
 80004b2:	d019      	beq.n	80004e8 <ExecuteCommand+0x4c>
 80004b4:	dc49      	bgt.n	800054a <ExecuteCommand+0xae>
 80004b6:	2b50      	cmp	r3, #80	; 0x50
 80004b8:	d023      	beq.n	8000502 <ExecuteCommand+0x66>
 80004ba:	dc46      	bgt.n	800054a <ExecuteCommand+0xae>
 80004bc:	2b31      	cmp	r3, #49	; 0x31
 80004be:	d002      	beq.n	80004c6 <ExecuteCommand+0x2a>
 80004c0:	2b32      	cmp	r3, #50	; 0x32
 80004c2:	d02f      	beq.n	8000524 <ExecuteCommand+0x88>
 80004c4:	e041      	b.n	800054a <ExecuteCommand+0xae>
	case '1':

		TIM3->ARR=100-1;									//Меняем частоту мигания
 80004c6:	4b2b      	ldr	r3, [pc, #172]	; (8000574 <ExecuteCommand+0xd8>)
 80004c8:	2263      	movs	r2, #99	; 0x63
 80004ca:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM3->CNT=0;
 80004cc:	4b29      	ldr	r3, [pc, #164]	; (8000574 <ExecuteCommand+0xd8>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	625a      	str	r2, [r3, #36]	; 0x24
			strcpy(TxBuffer,"Toggle Frequency set to 10Hz");
 80004d2:	4b26      	ldr	r3, [pc, #152]	; (800056c <ExecuteCommand+0xd0>)
 80004d4:	4a28      	ldr	r2, [pc, #160]	; (8000578 <ExecuteCommand+0xdc>)
 80004d6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80004d8:	c313      	stmia	r3!, {r0, r1, r4}
 80004da:	ca13      	ldmia	r2!, {r0, r1, r4}
 80004dc:	c313      	stmia	r3!, {r0, r1, r4}
 80004de:	6811      	ldr	r1, [r2, #0]
 80004e0:	6019      	str	r1, [r3, #0]
 80004e2:	7912      	ldrb	r2, [r2, #4]
 80004e4:	711a      	strb	r2, [r3, #4]
			break;
 80004e6:	e037      	b.n	8000558 <ExecuteCommand+0xbc>

	case 'S':
		TIM3->CR1 |= TIM_CR1_CEN;
 80004e8:	4b22      	ldr	r3, [pc, #136]	; (8000574 <ExecuteCommand+0xd8>)
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	4b21      	ldr	r3, [pc, #132]	; (8000574 <ExecuteCommand+0xd8>)
 80004ee:	2101      	movs	r1, #1
 80004f0:	430a      	orrs	r2, r1
 80004f2:	601a      	str	r2, [r3, #0]
		strcpy(TxBuffer, "Toggle Continue");				//Возобновляем работу таймера
 80004f4:	4b1d      	ldr	r3, [pc, #116]	; (800056c <ExecuteCommand+0xd0>)
 80004f6:	4a21      	ldr	r2, [pc, #132]	; (800057c <ExecuteCommand+0xe0>)
 80004f8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80004fa:	c313      	stmia	r3!, {r0, r1, r4}
 80004fc:	6812      	ldr	r2, [r2, #0]
 80004fe:	601a      	str	r2, [r3, #0]
		break;
 8000500:	e02a      	b.n	8000558 <ExecuteCommand+0xbc>

	case 'P':
		TIM3->CR1 &= ~TIM_CR1_CEN;							//Останавливаем работу таймера
 8000502:	4b1c      	ldr	r3, [pc, #112]	; (8000574 <ExecuteCommand+0xd8>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	4b1b      	ldr	r3, [pc, #108]	; (8000574 <ExecuteCommand+0xd8>)
 8000508:	2101      	movs	r1, #1
 800050a:	438a      	bics	r2, r1
 800050c:	601a      	str	r2, [r3, #0]
		TIM3->EGR |= TIM_EGR_UG;
 800050e:	4b19      	ldr	r3, [pc, #100]	; (8000574 <ExecuteCommand+0xd8>)
 8000510:	695a      	ldr	r2, [r3, #20]
 8000512:	4b18      	ldr	r3, [pc, #96]	; (8000574 <ExecuteCommand+0xd8>)
 8000514:	2101      	movs	r1, #1
 8000516:	430a      	orrs	r2, r1
 8000518:	615a      	str	r2, [r3, #20]
		strcpy(TxBuffer, "Toggle stop");
 800051a:	4b14      	ldr	r3, [pc, #80]	; (800056c <ExecuteCommand+0xd0>)
 800051c:	4a18      	ldr	r2, [pc, #96]	; (8000580 <ExecuteCommand+0xe4>)
 800051e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000520:	c313      	stmia	r3!, {r0, r1, r4}
		break;
 8000522:	e019      	b.n	8000558 <ExecuteCommand+0xbc>

	case '2':
			TIM3->ARR = 2000-1;
 8000524:	4b13      	ldr	r3, [pc, #76]	; (8000574 <ExecuteCommand+0xd8>)
 8000526:	4a17      	ldr	r2, [pc, #92]	; (8000584 <ExecuteCommand+0xe8>)
 8000528:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->CNT = 0;
 800052a:	4b12      	ldr	r3, [pc, #72]	; (8000574 <ExecuteCommand+0xd8>)
 800052c:	2200      	movs	r2, #0
 800052e:	625a      	str	r2, [r3, #36]	; 0x24
			strcpy(TxBuffer, "Toggle frequency set to 0.5 Hz");
 8000530:	4b0e      	ldr	r3, [pc, #56]	; (800056c <ExecuteCommand+0xd0>)
 8000532:	4a15      	ldr	r2, [pc, #84]	; (8000588 <ExecuteCommand+0xec>)
 8000534:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000536:	c313      	stmia	r3!, {r0, r1, r4}
 8000538:	ca13      	ldmia	r2!, {r0, r1, r4}
 800053a:	c313      	stmia	r3!, {r0, r1, r4}
 800053c:	6811      	ldr	r1, [r2, #0]
 800053e:	6019      	str	r1, [r3, #0]
 8000540:	8891      	ldrh	r1, [r2, #4]
 8000542:	8099      	strh	r1, [r3, #4]
 8000544:	7992      	ldrb	r2, [r2, #6]
 8000546:	719a      	strb	r2, [r3, #6]
			break;
 8000548:	e006      	b.n	8000558 <ExecuteCommand+0xbc>

	default:
		strcpy(TxBuffer, "Unknown command");
 800054a:	4b08      	ldr	r3, [pc, #32]	; (800056c <ExecuteCommand+0xd0>)
 800054c:	4a0f      	ldr	r2, [pc, #60]	; (800058c <ExecuteCommand+0xf0>)
 800054e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000550:	c313      	stmia	r3!, {r0, r1, r4}
 8000552:	6812      	ldr	r2, [r2, #0]
 8000554:	601a      	str	r2, [r3, #0]
	break;
 8000556:	46c0      	nop			; (mov r8, r8)
	}

	TransmitWithDMA(TxBuffer);								//Передаём строку из памяти в устройство
 8000558:	4b04      	ldr	r3, [pc, #16]	; (800056c <ExecuteCommand+0xd0>)
 800055a:	0018      	movs	r0, r3
 800055c:	f7ff ff64 	bl	8000428 <TransmitWithDMA>
	ComReceived = false;									//Обнуляем флаг приёма строки
 8000560:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <ExecuteCommand+0xf4>)
 8000562:	2200      	movs	r2, #0
 8000564:	701a      	strb	r2, [r3, #0]
}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	46bd      	mov	sp, r7
 800056a:	bdb0      	pop	{r4, r5, r7, pc}
 800056c:	2000001c 	.word	0x2000001c
 8000570:	20000081 	.word	0x20000081
 8000574:	40000400 	.word	0x40000400
 8000578:	08000688 	.word	0x08000688
 800057c:	080006a8 	.word	0x080006a8
 8000580:	080006b8 	.word	0x080006b8
 8000584:	000007cf 	.word	0x000007cf
 8000588:	080006c4 	.word	0x080006c4
 800058c:	080006e4 	.word	0x080006e4
 8000590:	20000080 	.word	0x20000080

08000594 <main>:


int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0

	Init_GPIO();
 8000598:	f7ff fe88 	bl	80002ac <Init_GPIO>
	initTIM3();
 800059c:	f7ff fea6 	bl	80002ec <initTIM3>
	initUSART1();
 80005a0:	f7ff fed0 	bl	8000344 <initUSART1>
	initDMA();
 80005a4:	f7ff ff14 	bl	80003d0 <initDMA>

	while(true)
 80005a8:	e7fe      	b.n	80005a8 <main+0x14>
	...

080005ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005ac:	480d      	ldr	r0, [pc, #52]	; (80005e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005b0:	e000      	b.n	80005b4 <Reset_Handler+0x8>
 80005b2:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b4:	480c      	ldr	r0, [pc, #48]	; (80005e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80005b6:	490d      	ldr	r1, [pc, #52]	; (80005ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80005b8:	4a0d      	ldr	r2, [pc, #52]	; (80005f0 <LoopForever+0xe>)
  movs r3, #0
 80005ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005bc:	e002      	b.n	80005c4 <LoopCopyDataInit>

080005be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c2:	3304      	adds	r3, #4

080005c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c8:	d3f9      	bcc.n	80005be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ca:	4a0a      	ldr	r2, [pc, #40]	; (80005f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005cc:	4c0a      	ldr	r4, [pc, #40]	; (80005f8 <LoopForever+0x16>)
  movs r3, #0
 80005ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d0:	e001      	b.n	80005d6 <LoopFillZerobss>

080005d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d4:	3204      	adds	r2, #4

080005d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d8:	d3fb      	bcc.n	80005d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005da:	f000 f811 	bl	8000600 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005de:	f7ff ffd9 	bl	8000594 <main>

080005e2 <LoopForever>:

LoopForever:
    b LoopForever
 80005e2:	e7fe      	b.n	80005e2 <LoopForever>
  ldr   r0, =_estack
 80005e4:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80005e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005ec:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005f0:	080006fc 	.word	0x080006fc
  ldr r2, =_sbss
 80005f4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005f8:	20000084 	.word	0x20000084

080005fc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005fc:	e7fe      	b.n	80005fc <ADC_IRQHandler>
	...

08000600 <__libc_init_array>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	2600      	movs	r6, #0
 8000604:	4d0c      	ldr	r5, [pc, #48]	; (8000638 <__libc_init_array+0x38>)
 8000606:	4c0d      	ldr	r4, [pc, #52]	; (800063c <__libc_init_array+0x3c>)
 8000608:	1b64      	subs	r4, r4, r5
 800060a:	10a4      	asrs	r4, r4, #2
 800060c:	42a6      	cmp	r6, r4
 800060e:	d109      	bne.n	8000624 <__libc_init_array+0x24>
 8000610:	2600      	movs	r6, #0
 8000612:	f000 f82b 	bl	800066c <_init>
 8000616:	4d0a      	ldr	r5, [pc, #40]	; (8000640 <__libc_init_array+0x40>)
 8000618:	4c0a      	ldr	r4, [pc, #40]	; (8000644 <__libc_init_array+0x44>)
 800061a:	1b64      	subs	r4, r4, r5
 800061c:	10a4      	asrs	r4, r4, #2
 800061e:	42a6      	cmp	r6, r4
 8000620:	d105      	bne.n	800062e <__libc_init_array+0x2e>
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	00b3      	lsls	r3, r6, #2
 8000626:	58eb      	ldr	r3, [r5, r3]
 8000628:	4798      	blx	r3
 800062a:	3601      	adds	r6, #1
 800062c:	e7ee      	b.n	800060c <__libc_init_array+0xc>
 800062e:	00b3      	lsls	r3, r6, #2
 8000630:	58eb      	ldr	r3, [r5, r3]
 8000632:	4798      	blx	r3
 8000634:	3601      	adds	r6, #1
 8000636:	e7f2      	b.n	800061e <__libc_init_array+0x1e>
 8000638:	080006f4 	.word	0x080006f4
 800063c:	080006f4 	.word	0x080006f4
 8000640:	080006f4 	.word	0x080006f4
 8000644:	080006f8 	.word	0x080006f8

08000648 <memcpy>:
 8000648:	2300      	movs	r3, #0
 800064a:	b510      	push	{r4, lr}
 800064c:	429a      	cmp	r2, r3
 800064e:	d100      	bne.n	8000652 <memcpy+0xa>
 8000650:	bd10      	pop	{r4, pc}
 8000652:	5ccc      	ldrb	r4, [r1, r3]
 8000654:	54c4      	strb	r4, [r0, r3]
 8000656:	3301      	adds	r3, #1
 8000658:	e7f8      	b.n	800064c <memcpy+0x4>

0800065a <memset>:
 800065a:	0003      	movs	r3, r0
 800065c:	1882      	adds	r2, r0, r2
 800065e:	4293      	cmp	r3, r2
 8000660:	d100      	bne.n	8000664 <memset+0xa>
 8000662:	4770      	bx	lr
 8000664:	7019      	strb	r1, [r3, #0]
 8000666:	3301      	adds	r3, #1
 8000668:	e7f9      	b.n	800065e <memset+0x4>
	...

0800066c <_init>:
 800066c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000672:	bc08      	pop	{r3}
 8000674:	469e      	mov	lr, r3
 8000676:	4770      	bx	lr

08000678 <_fini>:
 8000678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800067e:	bc08      	pop	{r3}
 8000680:	469e      	mov	lr, r3
 8000682:	4770      	bx	lr
